"""Health reporting utilities for Cortex"""

from typing import Dict, Any
from datetime import datetime


class HealthReporter:
    """Generate health reports and suggestions for Cortex"""
    
    def generate_suggestions(self, analysis_data: Dict[str, Any]) -> str:
        """Generate AI-powered suggestions based on analysis data"""
        
        broken_links = analysis_data.get('broken_links', [])
        summary = analysis_data.get('summary', {})
        
        # Group broken links by type
        wikilinks = [link for link in broken_links if link.get('type') == 'wikilink']
        markdown_links = [link for link in broken_links if link.get('type') == 'markdown']
        errors = [link for link in broken_links if link.get('type') == 'error']
        
        report = f"""# Cortex AI Link Repair Suggestions

Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## 📊 Analysis Summary

- **Total Files Processed**: {summary.get('total_files_processed', 0)}
- **Broken Links Found**: {summary.get('total_broken_links', 0)}
- **Files with Issues**: {summary.get('files_with_issues', 0)}

## 🔗 Broken Link Analysis

### 📝 WikiLinks Issues ({len(wikilinks)})
{self._generate_wikilink_suggestions(wikilinks)}

### 🔗 Markdown Link Issues ({len(markdown_links)})
{self._generate_markdown_suggestions(markdown_links)}

### ❌ Processing Errors ({len(errors)})
{self._generate_error_suggestions(errors)}

## 🛠️ Recommended Actions

### High Priority
- Fix broken wikilinks that appear in multiple files
- Repair markdown links to missing files
- Review and resolve processing errors

### Medium Priority  
- Standardize link formats across the repository
- Update outdated cross-references
- Validate external link accessibility

### Low Priority
- Optimize link structure for better navigation
- Consider link consolidation opportunities
- Update link documentation

---
*Report generated by Cortex Test Framework v0.1.0*
"""
        return report
    
    def _generate_wikilink_suggestions(self, wikilinks: list) -> str:
        """Generate suggestions for broken wikilinks"""
        if not wikilinks:
            return "✅ No broken wikilinks found!"
        
        suggestions = []
        
        # Group by link text to find patterns
        link_groups = {}
        for link in wikilinks:
            text = link.get('text', 'unknown')
            if text not in link_groups:
                link_groups[text] = []
            link_groups[text].append(link)
        
        for link_text, occurrences in link_groups.items():
            count = len(occurrences)
            files = [occ.get('file', 'unknown') for occ in occurrences]
            
            suggestion = f"""
### 🟡 Missing Link: `[[{link_text}]]`
- **Occurrences**: {count}
- **Files**: {', '.join(files[:3])}{'...' if len(files) > 3 else ''}
- **Suggested Actions**:
  - Create missing file: `{link_text}.md`
  - Or update links to existing file with similar name
  - Consider using full path if in different directory
"""
            suggestions.append(suggestion)
        
        return '\n'.join(suggestions) if suggestions else "No specific suggestions needed."
    
    def _generate_markdown_suggestions(self, markdown_links: list) -> str:
        """Generate suggestions for broken markdown links"""
        if not markdown_links:
            return "✅ No broken markdown links found!"
        
        suggestions = []
        
        for link in markdown_links[:10]:  # Limit to first 10 for readability
            file_path = link.get('file', 'unknown')
            link_text = link.get('text', 'unknown')
            link_path = link.get('path', 'unknown')
            line_num = link.get('line', 'unknown')
            
            suggestion = f"""
### 🔴 Broken Link: `[{link_text}]({link_path})`
- **File**: {file_path}:{line_num}
- **Issue**: Target file or path not found
- **Suggested Actions**:
  - Check if target file exists in different location
  - Update relative path if file was moved
  - Verify file extension and naming
"""
            suggestions.append(suggestion)
        
        if len(markdown_links) > 10:
            suggestions.append(f"\n*... and {len(markdown_links) - 10} more broken markdown links*")
        
        return '\n'.join(suggestions) if suggestions else "No specific suggestions needed."
    
    def _generate_error_suggestions(self, errors: list) -> str:
        """Generate suggestions for processing errors"""
        if not errors:
            return "✅ No processing errors found!"
        
        suggestions = []
        
        for error in errors[:5]:  # Limit to first 5 errors
            file_path = error.get('file', 'unknown')
            error_text = error.get('text', 'unknown error')
            
            suggestion = f"""
### ⚠️ Processing Error in `{file_path}`
- **Error**: {error_text}
- **Suggested Actions**:
  - Check file encoding (should be UTF-8)
  - Verify file is not corrupted
  - Review file permissions
"""
            suggestions.append(suggestion)
        
        if len(errors) > 5:
            suggestions.append(f"\n*... and {len(errors) - 5} more processing errors*")
        
        return '\n'.join(suggestions) if suggestions else "No specific suggestions needed."