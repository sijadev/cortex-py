name: 🔗 Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_call:
  schedule:
    - cron: '0 2 * * *'  # Täglich um 2 Uhr UTC

env:
  PYTHON_VERSION: "3.11"
  CI: "true"

jobs:
  integration-tests:
    name: Integration Tests with Neo4j
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      neo4j:
        image: neo4j:5.11-community
        env:
          NEO4J_AUTH: neo4j/testpassword
          NEO4J_PLUGINS: '["apoc"]'
          NEO4J_dbms_security_procedures_unrestricted: "apoc.*"
        ports:
          - 7474:7474
          - 7687:7687
        options: >-
          --health-cmd "cypher-shell -u neo4j -p testpassword 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 15

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-integration-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-integration-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Wait for Neo4j to be ready
      run: |
        echo "⏳ Waiting for Neo4j to be ready..."
        timeout 120s bash -c 'until curl -f http://localhost:7474; do sleep 5; done'
        echo "✅ Neo4j is ready"

    - name: Verify Neo4j connection
      run: |
        echo "🔍 Verifying Neo4j connection..."
        docker exec $(docker ps -q --filter ancestor=neo4j:5.11-community) \
          cypher-shell -u neo4j -p testpassword "RETURN 'Connection successful' as status"

    - name: Run integration tests
      env:
        NEO4J_URI: bolt://localhost:7687
        NEO4J_USER: neo4j
        NEO4J_PASSWORD: testpassword
        NEO4J_DISABLED: "0"
      run: |
        echo "🔗 Running Integration Tests..."
        python -m pytest tests/integration/ \
          -v \
          --tb=short \
          --maxfail=5 \
          --junitxml=integration-test-results.xml

    - name: Upload integration test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: integration-test-results-${{ github.run_number }}
        path: |
          tests/reports/
          integration-test-results.xml
          logs/
        retention-days: 14

    - name: Generate test report
      if: always()
      run: |
        echo "📊 Integration Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Tests run against Neo4j 5.11" >> $GITHUB_STEP_SUMMARY
        echo "- Database connection: ✅" >> $GITHUB_STEP_SUMMARY
