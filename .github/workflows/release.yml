name: üöÄ Release & Deployment

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

env:
  PYTHON_VERSION: "3.11"

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        fi

    - name: Validate version format
      run: |
        version="${{ steps.version.outputs.version }}"
        if [[ ! $version =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "‚ùå Invalid version format: $version"
          exit 1
        fi
        echo "‚úÖ Version validated: $version"

  build-and-test:
    name: Build & Test Release
    runs-on: ubuntu-latest
    needs: prepare-release
    timeout-minutes: 30

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel twine
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run full test suite
      run: |
        echo "üß™ Running full test suite for release..."
        python run_smoke_tests.py
        python -m pytest tests/unit/ -v

    - name: Build packages
      run: |
        echo "üì¶ Building packages..."
        cd cortex-cli
        python -m build

    - name: Verify packages
      run: |
        echo "‚úÖ Verifying built packages..."
        cd cortex-cli
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-packages-${{ needs.prepare-release.outputs.version }}
        path: cortex-cli/dist/
        retention-days: 30

  deploy:
    name: Deploy Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-test]
    timeout-minutes: 15
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-packages-${{ needs.prepare-release.outputs.version }}
        path: dist/

    - name: Create GitHub Release
      if: github.event_name == 'workflow_dispatch'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.prepare-release.outputs.version }}
        release_name: Release v${{ needs.prepare-release.outputs.version }}
        body: |
          üöÄ Cortex Release v${{ needs.prepare-release.outputs.version }}
          
          ## What's Changed
          - Automated release build
          - Full test suite passed
          
          ## Installation
          ```bash
          pip install cortex-cli==${{ needs.prepare-release.outputs.version }}
          ```
        draft: false
        prerelease: false
