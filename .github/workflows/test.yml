name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]  # Removed 3.9 due to MCP compatibility

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Set up test environment
      run: |
        # Create necessary directories
        mkdir -p logs/tests
        mkdir -p tests/reports
        
        # Set environment variables for tests
        export PYTHONPATH="${PYTHONPATH}:$(pwd):$(pwd)/src"
        export NEO4J_DISABLED=1  # Disable Neo4j for CI tests
        export CI=1  # Set CI flag to prevent browser opening
        echo "PYTHONPATH=${PYTHONPATH}:$(pwd):$(pwd)/src" >> $GITHUB_ENV
        echo "NEO4J_DISABLED=1" >> $GITHUB_ENV
        echo "CI=1" >> $GITHUB_ENV

    - name: Run all tests with coverage
      run: |
        python -m pytest tests/ --tb=short -v --cov=src --cov-report=xml --cov-report=html --maxfail=5

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-python-${{ matrix.python-version }}
        path: |
          tests/reports/
          logs/tests/
          htmlcov/
        retention-days: 30

    - name: Upload coverage reports to Codecov
      if: matrix.python-version == '3.12'
      uses: codecov/codecov-action@v4
      with:
        file: coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  test-integration:
    runs-on: ubuntu-latest
    needs: test

    services:
      neo4j:
        image: neo4j:5.13
        env:
          NEO4J_AUTH: neo4j/testpassword
          NEO4J_PLUGINS: '["apoc"]'
        ports:
          - 7687:7687
          - 7474:7474
        options: >-
          --health-cmd "cypher-shell -u neo4j -p testpassword 'RETURN 1'"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: 3.12

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Wait for Neo4j
      run: |
        timeout 60 bash -c 'until echo > /dev/tcp/localhost/7687; do sleep 1; done'

    - name: Set up Neo4j integration test environment
      run: |
        export PYTHONPATH="${PYTHONPATH}:$(pwd):$(pwd)/src"
        export NEO4J_URI=bolt://localhost:7687
        export NEO4J_USER=neo4j
        export NEO4J_PASSWORD=testpassword
        export CI=1
        echo "PYTHONPATH=${PYTHONPATH}:$(pwd):$(pwd)/src" >> $GITHUB_ENV
        echo "NEO4J_URI=bolt://localhost:7687" >> $GITHUB_ENV
        echo "NEO4J_USER=neo4j" >> $GITHUB_ENV
        echo "NEO4J_PASSWORD=testpassword" >> $GITHUB_ENV
        echo "CI=1" >> $GITHUB_ENV

    - name: Run Neo4j integration tests
      run: |
        python -m pytest tests/unit/test_neo4j_integration.py::TestNeo4jRealConnection -v

    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: tests/reports/
        retention-days: 30

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.12

    - name: Install security tools
      run: |
        pip install bandit safety

    - name: Run Bandit Security Scan
      run: |
        bandit -r src -f json -o security-report.json || true

    - name: Run Safety Check
      run: |
        safety check --json --output safety-report.json || true

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          security-report.json
          safety-report.json
        retention-days: 30

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.12

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy

    - name: Run code quality checks
      run: |
        # Check code formatting with Black
        black --check --diff src/ tests/ || true
        
        # Check import sorting with isort
        isort --check-only --diff src/ tests/ || true
        
        # Run linting with flake8
        flake8 src/ tests/ --max-line-length=100 --extend-ignore=E203,W503 || true
        
        # Run type checking with mypy (lenient for now)
        mypy src/ --ignore-missing-imports || true

  test-summary:
    runs-on: ubuntu-latest
    needs: [test, test-integration, security-scan, code-quality]
    if: always()

    steps:
    - name: Test Summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Unit Tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Integration Tests: ${{ needs.test-integration.result }}" >> $GITHUB_STEP_SUMMARY  
        echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Code Quality: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.test-integration.result }}" == "success" ]]; then
          echo "✅ All tests passed successfully!" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Some tests failed. Please check the logs." >> $GITHUB_STEP_SUMMARY
        fi
