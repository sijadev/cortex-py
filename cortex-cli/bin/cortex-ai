#!/bin/bash
# Cortex-AI Web Interface Starter
# Startet den Cortex-AI Server und √∂ffnet die Webanwendung im Browser

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CORTEX_CLI_PATH="$(dirname "$SCRIPT_DIR")"
CORTEX_PATH="$(dirname "$CORTEX_CLI_PATH")"
# Support both folder names for compatibility
CORTEX_AI_PATH_UNDERSCORE="${CORTEX_PATH}/cortex_ai"
CORTEX_AI_PATH_HYPHEN="${CORTEX_PATH}/cortex-ai"
if [ -d "$CORTEX_AI_PATH_UNDERSCORE" ]; then
  CORTEX_AI_PATH="$CORTEX_AI_PATH_UNDERSCORE"
elif [ -d "$CORTEX_AI_PATH_HYPHEN" ]; then
  CORTEX_AI_PATH="$CORTEX_AI_PATH_HYPHEN"
else
  CORTEX_AI_PATH="${CORTEX_PATH}/cortex_ai" # default
fi

# Color codes for better output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Error handling function
handle_error() {
    echo -e "${RED}‚ùå Fehler: $1${NC}"
    exit 1
}

# Check for uvicorn
if ! command -v uvicorn &>/dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è Uvicorn nicht gefunden. Installation wird durchgef√ºhrt...${NC}"
    python3 -m pip install uvicorn || handle_error "Uvicorn konnte nicht installiert werden"
fi

# Ensure FastAPI and neo4j driver are available
if ! python3 -c "import fastapi" &>/dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è FastAPI nicht gefunden. Installation wird durchgef√ºhrt...${NC}"
    python3 -m pip install fastapi || handle_error "FastAPI konnte nicht installiert werden"
fi
if ! python3 -c "import neo4j" &>/dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è Neo4j Python-Treiber nicht gefunden. Installation wird durchgef√ºhrt...${NC}"
    python3 -m pip install neo4j || handle_error "Neo4j-Treiber konnte nicht installiert werden"
fi

# Defaults (allow environment to override)
PORT="${PORT:-8000}"
HOST="${HOST:-127.0.0.1}"
OPEN_PATH="${OPEN_PATH:-/chat}"
NO_BROWSER=0

# Parse command line arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --port=*)
            PORT="${1#*=}"
            ;;
        --port)
            PORT="$2"
            shift
            ;;
        --host=*)
            HOST="${1#*=}"
            ;;
        --host)
            HOST="$2"
            shift
            ;;
        --no-browser)
            NO_BROWSER=1
            ;;
        *)
            echo -e "${YELLOW}‚ö†Ô∏è Unbekannte Option: $1${NC}"
            ;;
    esac
    shift
done

# Check if Cortex-AI directory exists
if [ ! -d "$CORTEX_AI_PATH" ]; then
    handle_error "Cortex-AI Verzeichnis nicht gefunden: $CORTEX_AI_PATH"
fi

# Start the server
echo -e "${BLUE}üöÄ Starte Cortex-AI Server auf http://${HOST}:${PORT}...${NC}"
cd "$CORTEX_AI_PATH"

# Start server in background
uvicorn app.main:app --reload --host "$HOST" --port "$PORT" &
SERVER_PID=$!

# Wait for server to start
echo -e "${YELLOW}‚è≥ Warte auf Server-Start...${NC}"
sleep 3

# Check if server started successfully
if ! kill -0 $SERVER_PID 2>/dev/null; then
    handle_error "Server konnte nicht gestartet werden (Host/Port belegt oder Fehler beim Start)"
fi

# Open browser
if [ $NO_BROWSER -eq 0 ]; then
    echo -e "${GREEN}‚úÖ √ñffne Browser...${NC}"
    URL="http://${HOST}:${PORT}${OPEN_PATH}"
    if [ -n "$BROWSER" ]; then
        "$BROWSER" "$URL" || echo -e "${YELLOW}‚ö†Ô∏è Browser konnte nicht ge√∂ffnet werden${NC}"
    elif command -v open &>/dev/null; then
        open "$URL" || echo -e "${YELLOW}‚ö†Ô∏è Browser konnte nicht ge√∂ffnet werden${NC}"
    elif command -v xdg-open &>/dev/null; then
        xdg-open "$URL" || echo -e "${YELLOW}‚ö†Ô∏è Browser konnte nicht ge√∂ffnet werden${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Kein Browser-√ñffner gefunden. √ñffne manuell: $URL${NC}"
    fi
fi

echo -e "${GREEN}‚úÖ Cortex-AI l√§uft auf http://${HOST}:${PORT}${NC}"
echo -e "${YELLOW}Dr√ºcke Strg+C zum Beenden${NC}"

# Trap Ctrl+C
trap "echo -e '${BLUE}üõë Beende Server...${NC}'; kill $SERVER_PID; exit 0" INT

# Keep script running until Ctrl+C
wait $SERVER_PID
