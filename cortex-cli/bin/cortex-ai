#!/bin/bash

# Cortex-AI CLI - Modernized for MCP Integration
# Dieses Skript startet jetzt den MCP Server anstelle des FastAPI Servers

# Define colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Error handling
handle_error() {
    echo -e "${RED}‚ùå Fehler: $1${NC}"
    exit 1
}

# Check for Python 3
if ! command -v python3 &>/dev/null; then
    handle_error "Python 3 ist nicht installiert oder nicht im PATH"
fi

# Check for MCP dependency
if ! python3 -c "import mcp" &>/dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è MCP nicht gefunden. Installation wird durchgef√ºhrt...${NC}"
    python3 -m pip install mcp || handle_error "MCP konnte nicht installiert werden"
fi

# Check for Neo4j driver
if ! python3 -c "import neo4j" &>/dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è Neo4j Python-Treiber nicht gefunden. Installation wird durchgef√ºhrt...${NC}"
    python3 -m pip install neo4j || handle_error "Neo4j-Treiber konnte nicht installiert werden"
fi

# Define paths
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CORTEX_PROJECT_PATH="$(dirname "$(dirname "$SCRIPT_DIR")")"
MCP_SERVER_PATH="$CORTEX_PROJECT_PATH/mcp_cortex_server.py"

# Check if MCP server exists
if [ ! -f "$MCP_SERVER_PATH" ]; then
    handle_error "MCP Server nicht gefunden: $MCP_SERVER_PATH"
fi

# Parse command line arguments for help/info
if [[ "$1" == "--help" || "$1" == "-h" ]]; then
    echo -e "${BLUE}Cortex-AI MCP Server${NC}"
    echo -e "${GREEN}Verwendung:${NC} cortex-ai [--help|--test|--status]"
    echo -e ""
    echo -e "${YELLOW}Optionen:${NC}"
    echo -e "  --help, -h    Zeigt diese Hilfe"
    echo -e "  --test        Testet den MCP Server"
    echo -e "  --status      Zeigt den Server-Status"
    echo -e ""
    echo -e "${BLUE}Der MCP Server wird automatisch von Claude Desktop verwaltet.${NC}"
    echo -e "${BLUE}Konfigurationsdatei: $CORTEX_PROJECT_PATH/claude_desktop_config.json${NC}"
    exit 0
fi

if [[ "$1" == "--test" ]]; then
    echo -e "${BLUE}üß™ Teste MCP Server...${NC}"
    cd "$CORTEX_PROJECT_PATH"
    python3 -c "
import sys
sys.path.append('$CORTEX_PROJECT_PATH')
try:
    from mcp_cortex_server import server
    print('‚úÖ MCP Server kann erfolgreich importiert werden')
except ImportError as e:
    print(f'‚ùå Import-Fehler: {e}')
    sys.exit(1)
"
    exit $?
fi

if [[ "$1" == "--status" ]]; then
    echo -e "${BLUE}üìä MCP Server Status:${NC}"
    echo -e "${GREEN}Server-Datei:${NC} $MCP_SERVER_PATH"
    echo -e "${GREEN}Konfiguration:${NC} $CORTEX_PROJECT_PATH/claude_desktop_config.json"

    if [ -f "$CORTEX_PROJECT_PATH/claude_desktop_config.json" ]; then
        echo -e "${GREEN}‚úÖ Claude Desktop Konfiguration vorhanden${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Claude Desktop Konfiguration fehlt${NC}"
    fi

    exit 0
fi

# Default behavior - inform about MCP usage
echo -e "${BLUE}üîÑ Cortex-AI verwendet jetzt MCP (Model Context Protocol)${NC}"
echo -e ""
echo -e "${GREEN}‚úÖ Der MCP Server ist installiert und konfiguriert${NC}"
echo -e "${BLUE}üìç Server-Datei:${NC} $MCP_SERVER_PATH"
echo -e ""
echo -e "${YELLOW}üí° Verwendung:${NC}"
echo -e "  1. Claude Desktop √∂ffnen"
echo -e "  2. MCP Server wird automatisch geladen"
echo -e "  3. Cortex-Funktionen sind direkt in Claude verf√ºgbar"
echo -e ""
echo -e "${BLUE}üîß Konfiguration:${NC} $CORTEX_PROJECT_PATH/claude_desktop_config.json"
echo -e ""
echo -e "${GREEN}Verwende 'cortex-ai --help' f√ºr weitere Optionen${NC}"
